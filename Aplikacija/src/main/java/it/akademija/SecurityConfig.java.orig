package it.akademija;

import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
<<<<<<< HEAD
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetailsService;
=======
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
>>>>>>> e7adaeb69ebafe67f5dc24c67644f59aa68631c9
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;

@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true)
public class SecurityConfig extends WebSecurityConfigurerAdapter {

	@Autowired
	private SecurityEntryPoint securityEntryPoint;
	@Autowired
	private UserDetailsService userService;

	@Autowired
	public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
		auth.userDetailsService(userService);
<<<<<<< HEAD
		auth.inMemoryAuthentication().withUser("qwerty").password("123456").roles("USER", "CALC");
=======
//		auth.inMemoryAuthentication().withUser("uu").password("pp").roles("USER", "CALC");
	}

	@Bean
	public PasswordEncoder getPasswordEncoder() {
		return NoOpPasswordEncoder.getInstance();
>>>>>>> e7adaeb69ebafe67f5dc24c67644f59aa68631c9
	}

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.authorizeRequests()
				// be saugumo UI dalis ir swaggeris
				.antMatchers("/swagger-ui.html", "/console", "/api/**").permitAll()
				// visi /api/ saugus (dar galima .anyRequest() )
				.antMatchers("/").authenticated().and().formLogin() // leidziam login
				// prisijungus
				.successHandler(new AuthenticationSuccessHandler() {

					@Override
					public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response,
<<<<<<< HEAD
							Authentication authentication) throws IOException, ServletException {
=======
							org.springframework.security.core.Authentication authentication)
							throws IOException, ServletException {
>>>>>>> e7adaeb69ebafe67f5dc24c67644f59aa68631c9
						response.setHeader("Access-Control-Allow-Credentials", "true");
						response.setHeader("Access-Control-Allow-Origin", request.getHeader("Origin"));
						response.setHeader("Content-Type", "application/json;charset=UTF-8");
						response.getWriter().print("{\"username\": \""
								+ SecurityContextHolder.getContext().getAuthentication().getName() + "\"}");
<<<<<<< HEAD
					}
=======

					}

>>>>>>> e7adaeb69ebafe67f5dc24c67644f59aa68631c9
				})
				// esant blogiems user/pass
				.failureHandler(new SimpleUrlAuthenticationFailureHandler()).loginPage("/login").permitAll() // jis jau
																												// egzistuoja
																												// !
				.and().logout().permitAll() // leidziam /logout
				.and().csrf().disable() // nenaudojam tokenu
// toliau forbidden klaidai
				.exceptionHandling().authenticationEntryPoint(securityEntryPoint).and().headers().frameOptions()
				.disable(); // H2
							// konsolei
	}
<<<<<<< HEAD
	
}
=======

}
>>>>>>> e7adaeb69ebafe67f5dc24c67644f59aa68631c9
