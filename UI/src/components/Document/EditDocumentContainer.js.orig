import React, { Component } from "react";
import axios from "axios";
import ApiUrl from "../../APIURL";

class EditDocumentContainer extends Component {
<<<<<<< HEAD
    constructor() {
        super();
        this.state = {
            doctypes: [{
            }],
            userId: "",
            document: {
                title: "",
                summary: "",
            },
            results: [],
            file: null,
            loading: true,
=======
  constructor() {
    super();
    this.state = {
      doctypes: [
        {
          id: "",
          title: ""
>>>>>>> 15d9ddf37f4f3442d93c9df7d35c2e271ae381af
        }
      ],
      userId: "",
      title: "",
      summary: "",
      results: [],
      file: null
    };
  }

<<<<<<< HEAD
    componentDidMount() {
        this.getDocument()
    }
=======
  componentDidMount() {
    this.getDocument();
  }
>>>>>>> 15d9ddf37f4f3442d93c9df7d35c2e271ae381af

  getDocument = e => {
    axios
      .get(`${ApiUrl}documents/${this.props.match.params.id}`)
      .then(response => {
        this.setState(response.data);
        axios
<<<<<<< HEAD
            .get(`${ApiUrl}documents/${this.props.match.params.id}`)
            .then(response => {
                this.setState({
                    title: response.data.title,
                    summary: response.data.summary,
                    doctypeItemTitle: response.data.doctypes.title,
                    doctypeItemId: response.data.doctypes.id
                });
                axios
                    .get(`${ApiUrl}loggedUserId`)
                    .then(response => {
                        this.setState({ userId: response.data });
                        axios
                            .get(`${ApiUrl}users/${this.state.userId}/doctypesusercreates`)
                            .then(response => {
                                this.setState({ doctypes: response.data })
                            })
                        axios.get(`${ApiUrl}files/${this.state.userId}/${this.props.match.params.id}/uploadedFilesNames`)
                            .then(response => {
                                this.setState({ results: response.data });
                            })
                            .then(this.setState({ loading: false }))
                            .catch(error => {
                                alert("Dokumentas turi turėti bent vieną bylą.")
                            });
                    })
                    .catch(error => {
                        alert("Tokio vartotojo nera arba jis neprisijunges.")
                    });
            })
            .catch(error => {
                alert("Duomenų apie šį dokumentą nėra.")
            });
    }

    onTitleChange = event => {
        this.setState({ title: event.target.value });
    }

    onSummaryChange = event => {
        this.setState({ summary: event.target.value });
    }

    handleDoctypesChange = e => {
        this.setState({ doctypeItemId: e.target.value });
    };

    onFilesChange = event => {
        event.preventDefault();
        if (event.target.files[0].size < 10000000) {
            this.setState({ file: event.target.files[0] });
        } else {
            alert("Pasirinkta byla per didelė.")
        }
    };

    onFormSubmit = (e) => {
        e.preventDefault();
        const data = new FormData()
        data.append("file", this.state.file)
        axios
            .post(`${ApiUrl}files/${this.state.userId}/${this.state.document.id}/uploadFile`, data)
            .then((response) => {
                axios.get(`${ApiUrl}files/${this.state.userId}/${this.state.document.id}/uploadedFilesNames`)
                    .then(response => {
                        this.setState({ results: response.data });
                    })
                    .catch(error => {
                        alert("Dokumentas turi turėti bent vieną bylą.")
                    });
            })
            .catch((error) => {
                alert("Įkelkite bent vieną bylą.")
            })
    }

    handleClick = (e) => {
        e.preventDefault();
        axios.delete(`${ApiUrl}files/${this.state.userId}/${this.state.document.id}/documentsDelete`)
            .then(response => {
                axios.get(`${ApiUrl}files/${this.state.userId}/${this.state.document.id}/uploadedFilesNames`)
                    .then(response => {
                        this.setState({ results: response.data });
                        alert("Sėkmingai ištrynėte visas bylas. \nGalite įkelti naujas.")
                    })
                    .catch(error => {
                    });
            })
            .catch(error => { });
            axios
          .get(`${ApiUrl}loggedUserId`)
          .then(response => {
            this.setState({ userId: response.data });
            axios
              .get(`${ApiUrl}users/${this.state.userId}/doctypesusercreates`)
              .then(response => {
                this.setState({ doctypes: response.data });
              })
              .then(response => {
                this.setState({
                  doctypeItem: this.state.doctypes.map(doctype => (
                    <option key={doctype.id} value={doctype.id}>
                      {doctype.title}
                    </option>
                  ))
                });
              });
            axios
              .get(
                `${ApiUrl}files/${this.state.userId}/${this.props.match.params.id}/uploadedFilesNames`
              )
              .then(response => {
                this.setState({ results: response.data });
              })
              .catch(error => {
                alert("Dokumentas turi turėti bent vieną bylą.");
              });
          })
          .catch(error => {
            alert("Tokio vartotojo nera arba jis neprisijunges.");
          });
      })
      .catch(error => {
        alert("Duomenų apie šį dokumentą nėra.");
      });
  };

  onChange = event => {
    this.setState({ [event.target.name]: event.target.value });
  };

  handleDoctypesChange = e => {
    this.setState({ value: e.target.value });
  };

  onFilesChange = event => {
    event.preventDefault();
    if (event.target.files[0].size < 10000000) {
      this.setState({ file: event.target.files[0] });
    } else {
      alert("Pasirinkta byla per didelė.");
>>>>>>> 15d9ddf37f4f3442d93c9df7d35c2e271ae381af
    }
  };

<<<<<<< HEAD
    downloadFiles = (e) => {
        fetch(`${ApiUrl}files/${this.state.userId}/${this.state.document.id}/downloadZip`)
            .then(response => {
                if (this.state.results && this.state.results.length > 0) {
                    response.blob().then(blob => {
                        let url = window.URL.createObjectURL(blob);
                        let a = document.createElement('a');
                        a.href = url;
                        a.download = 'Bylos.zip';
                        a.click();
                    });
                } else {
                    alert("Neprisegėte nei vienos bylos.");
                }
            });
    }

    updateDocument = e => {
        e.preventDefault();
        const data = {
            title: this.state.title,
            summary: this.state.summary,
            doctypeItemId: this.state.doctypeItemId
        }
        axios
            .put(`${ApiUrl}documents/${this.props.match.params.id}/${this.state.doctypeItemId}`, data)
            .then(response => {
                if (this.state.results && this.state.results.length > 0) {
                    alert("Jūs sėkmingai pakeitėte dokumento duomenis.");
                    this.props.history.push("/Gentoo/user");
                } else {
                    alert("Pridėkite bent vieną bylą.")
                }
            })
            .catch(error => { })
    }
=======
  onFormSubmit = e => {
    e.preventDefault();
    const data = new FormData();
    data.append("file", this.state.file);
    axios
      .post(
        `${ApiUrl}files/${this.state.userId}/${this.state.id}/uploadFile`,
        data
      )
      .then(response => {
        axios
          .get(
            `${ApiUrl}files/${this.state.userId}/${this.state.id}/uploadedFilesNames`
          )
          .then(response => {
            this.setState({ results: response.data });
          })
          .catch(error => {
            alert("Dokumentas turi turėti bent vieną bylą.");
          });
      })
      .catch(error => {
        alert("Įkelkite bent vieną bylą.");
      });
  };

  handleClick = e => {
    e.preventDefault();
    axios
      .delete(
        `${ApiUrl}files/${this.state.userId}/${this.state.id}/documentsDelete`
      )
      .then(response => {
        axios
          .get(
            `${ApiUrl}files/${this.state.userId}/${this.state.id}/uploadedFilesNames`
          )
          .then(response => {
            this.setState({ results: response.data });
            alert("Sėkmingai ištrynėte visas bylas. \nGalite įkelti naujas.");
          })
          .catch(error => {});
      })
      .catch(error => {});
  };

  downloadFiles = e => {
    fetch(
      `${ApiUrl}files/${this.state.userId}/${this.state.id}/downloadZip`
    ).then(response => {
      if (this.state.results && this.state.results.length > 0) {
        response.blob().then(blob => {
          let url = window.URL.createObjectURL(blob);
          let a = document.createElement("a");
          a.href = url;
          a.download = "Bylos.zip";
          a.click();
        });
      } else {
        alert("Neprisegėte nei vienos bylos.");
      }
    });
  };
>>>>>>> 15d9ddf37f4f3442d93c9df7d35c2e271ae381af

  updateDocument = e => {
    e.preventDefault();
    const data = {
      title: this.state.title,
      summary: this.state.summary
    };
    axios
      .put(
        `${ApiUrl}documents/${this.props.match.params.id}/${this.state.value}`,
        data
      )
      .then(response => {
        if (this.state.results && this.state.results.length > 0) {
          alert("Jūs sėkmingai pakeitėte dokumento duomenis.");
          this.props.history.push("/Gentoo/user");
        } else {
          alert("Pridėkite bent vieną bylą.");
        }
      })
      .catch(error => {});
  };

  goBack = e => {
    e.preventDefault();
    if (this.state.results && this.state.results.length > 0) {
      this.props.history.push(`/Gentoo/user`);
    } else {
      alert("Pridėkite bent vieną bylą.");
    }
  };

<<<<<<< HEAD
    render() {
        if (this.state.loading) {
            return (
                <div>Loading!!!!!!</div>
            )
        }
        const doctype = this.state.doctypes.filter(doctype => doctype.title !== this.state.doctypeItemTitle).map((doctype, index) => {
            return (<option key={index} value={doctype.id}>
                {doctype.title}
            </option>)
        })
        const result = this.state.results.map((result, index) => {
            return <li className="list-group-item list-group-item-dark" id="mylist2" key={index}>
                <div className="row my-1">
                    <div className="col-2">{index + 1}</div>
                    <div className="col-10">{result}</div>
                </div>
            </li>
        });
        return (
            <div className="container my-4" >
                <div className="panel panel-default" >
                    <div className="panel-heading" >
                        <h3 className="panel-title" > Dokumento peržiūra </h3>
                    </div>
                    <div className="panel-body" >
                        <form >
                            <div className="form-group" >
                                <label > Pavadinimas: </label>
                                <input type="text" className="form-control" name="title" onChange={this.onTitleChange} value={this.state.title} placeholder="Pavadinimas" required />
                            </div>
                            <div className="form-group" >
                                <label > Trumpas aprašymas </label>
                                <textarea className="form-control" name="summary" onChange={this.onSummaryChange} value={this.state.summary} rows="3" > </textarea>
                            </div >
                            <div className="form-group" >
                                <label> Pasirinkite dokumento tipą:
                            <select onChange={this.handleDoctypesChange} >
                                        <option value={this.state.doctypeItemId}>{this.state.doctypeItemTitle}</option>
                                        {doctype}
                                    </select>
                                </label>
                            </div >
                        </form>
                        <form onSubmit={this.onFormSubmit} >
                            <button className="btn btn-dark" id="saveButton" type="submit" onClick={this.updateDocument}> Išsaugoti </button>
                            <button className="btn btn-dark" id="saveButton" type="submit" onClick={this.goBack}> Atšaukti pakeitimus </button>
                            <div className="form-group" >
                                <label > Jūsų prisegtos bylos: </label>
                                <button className="btn-dark" id="document" onClick={(e) => { if (window.confirm('Ar tikrai norite ištrinti įkeltas bylas? \nŠis pakeitimas negalės būti atšauktas.')) this.handleClick(e) }}>Ištrinti bylas</button>
                                <li className="list-group-item list-group-item-dark" id="mylist">
                                    <div className="row my-2">
                                        <div className="col-2 font-weight-bold">#</div>
                                        <div className="col-10 font-weight-bold">Bylos pavadinimas</div>
                                    </div>
                                </li>
                                <div>{result}</div>
                                <div className="row" > </div>
                                <input id="chooseFile" type="file" onChange={this.onFilesChange} />
                                <div >
                                    <button id="uploadButton" type="submit" > Įkelti </button>
                                </div >
                            </div>
                        </form >
                        <div className="panel-body">
                            <label>Parsisiųsti bylas peržiūrai:</label>
                            <div className="row" > </div>
                            <button className="download" onClick={this.downloadFiles}>Atsisiųsti</button>
                        </div>
=======
  render() {
    const result = this.state.results.map((result, index) => {
      return (
        <li
          className="list-group-item list-group-item-dark"
          id="mylist2"
          key={index}
        >
          <div className="row my-1">
            <div className="col-2">{index + 1}</div>
            <div className="col-10">{result}</div>
          </div>
        </li>
      );
    });
    return (
      <div className="container my-4">
        <div className="panel panel-default">
          <div className="panel-heading">
            <h3 className="panel-title"> Dokumento peržiūra </h3>
          </div>
          <div className="panel-body">
            <form>
              <div className="form-group">
                <label> Pavadinimas: </label>
                <input
                  type="text"
                  className="form-control "
                  name="title"
                  onChange={this.onChange}
                  value={this.state.title}
                  placeholder="Pavadinimas"
                  required
                />
              </div>
              <div className="form-group">
                <label> Trumpas aprašymas </label>
                <textarea
                  className="form-control"
                  name="summary"
                  onChange={this.onChange}
                  value={this.state.summary}
                  rows="3"
                >
                  {" "}
                </textarea>
              </div>
              <div className="form-group">
                <label>
                  {" "}
                  Pasirinkite dokumento tipą:
                  <select
                    value={this.state.doctypes.title}
                    onChange={this.handleDoctypesChange}
                  >
                    {this.state.doctypeItem}
                  </select>
                </label>
              </div>
            </form>
            <form onSubmit={this.onFormSubmit}>
              <div className="form-group">
                <label> Jūsų prisegtos bylos: </label>
                <button
                  className="btn-dark"
                  id="document"
                  onClick={e => {
                    if (
                      window.confirm(
                        "Ar tikrai norite ištrinti įkeltas bylas? \nŠis pakeitimas negalės būti atšauktas."
                      )
                    )
                      this.handleClick(e);
                  }}
                >
                  Ištrinti bylas
                </button>
                <li
                  className="list-group-item list-group-item-dark"
                  id="mylist"
                >
                  <div className="row my-2">
                    <div className="col-2 font-weight-bold">#</div>
                    <div className="col-10 font-weight-bold">
                      Bylos pavadinimas
>>>>>>> 15d9ddf37f4f3442d93c9df7d35c2e271ae381af
                    </div>
                  </div>
                </li>
                <div>{result}</div>
                <div className="row"> </div>
                <input
                  id="chooseFile"
                  type="file"
                  onChange={this.onFilesChange}
                />
                <div>
                  <button id="uploadButton" type="submit">
                    {" "}
                    Įkelti{" "}
                  </button>
                </div>
              </div>
            </form>
            <div className="panel-body">
              <label>Parsisiųsti bylas peržiūrai:</label>
              <div className="row"> </div>
              <button className="download" onClick={this.downloadFiles}>
                Atsisiųsti
              </button>
            </div>
            <button
              className="btn btn-dark"
              id="saveButton"
              type="submit"
              onClick={this.updateDocument}
            >
              {" "}
              Išsaugoti{" "}
            </button>
            <button
              className="btn btn-dark"
              id="saveButton"
              type="submit"
              onClick={this.goBack}
            >
              {" "}
              Atšaukti pakeitimus{" "}
            </button>
          </div>
        </div>
      </div>
    );
  }
}

export default EditDocumentContainer;
